package frontend.updateframes;

import backend.MainServer;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.JComboBox;
import pojo.College;
import pojo.Department;
import pojo.Programme;
import pojo.Student;

/**
 *
 * @author Fego
 */
public class UpdateProgrammeFrame extends AbstractUpdateFrame {

    private Department newDept, oldDept;
    private Programme progGlobal;

    /**
     * Creates new form UpdateProgrammeFrame
     */
    private UpdateProgrammeFrame() {
        initComponents();
    }

    public UpdateProgrammeFrame(MainServer server, Programme prog) {
        this();
        this.server = server;
        this.programme = prog;
        initBackgroundDetailsProg(server, false);
        initPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInfo = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        lblReportHeader7 = new javax.swing.JLabel();
        txtProgName = new javax.swing.JTextField();
        cmbProgDept = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        txtProgFee = new javax.swing.JTextField();
        txtMaximumLevel = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        lblMatricType = new javax.swing.JLabel();
        cmbCollege = new javax.swing.JComboBox<>();
        jLabel39 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Update Programme");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelInfo.setBackground(new java.awt.Color(84, 83, 83));

        jLabel37.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(204, 204, 204));
        jLabel37.setText("PROGRAMME'S DEPARTMENT");

        jLabel41.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(204, 204, 204));
        jLabel41.setText("PROGRAMME NAME");

        lblReportHeader7.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        lblReportHeader7.setForeground(new java.awt.Color(204, 204, 204));
        lblReportHeader7.setText("PROGRAMME INFORMATION");

        txtProgName.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        cmbProgDept.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        cmbProgDept.setName("CollegeCombo"); // NOI18N
        cmbProgDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProgDeptActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(204, 204, 204));
        btnUpdate.setFont(new java.awt.Font("Segoe UI Emoji", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(204, 204, 204));
        btnUpdate.setText("UPDATE PROGRAMME");
        btnUpdate.setToolTipText("Add course");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.setFocusPainted(false);
        btnUpdate.setOpaque(false);
        btnUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(204, 204, 204));
        jLabel36.setText("MAXIMUM LEVEL");

        jLabel42.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(204, 204, 204));
        jLabel42.setText("PROGRAMME FEE");

        txtProgFee.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        txtMaximumLevel.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        jLabel38.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(204, 204, 204));
        jLabel38.setText("PROGRAMME MATRIC NO TYPE");

        lblMatricType.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lblMatricType.setForeground(new java.awt.Color(204, 204, 204));
        lblMatricType.setText("N/A");

        cmbCollege.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        cmbCollege.setName("CollegeCombo"); // NOI18N
        cmbCollege.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCollegeActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(204, 204, 204));
        jLabel39.setText("DEPARTMENT'S COLLEGE");

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInfoLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(lblReportHeader7))
                    .addGroup(panelInfoLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnUpdate)
                            .addGroup(panelInfoLayout.createSequentialGroup()
                                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel36)
                                    .addComponent(jLabel41)
                                    .addComponent(jLabel42)
                                    .addComponent(jLabel38)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel39))
                                .addGap(49, 49, 49)
                                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtProgName)
                                    .addComponent(txtProgFee)
                                    .addComponent(txtMaximumLevel)
                                    .addComponent(lblMatricType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbProgDept, 0, 282, Short.MAX_VALUE)
                                    .addComponent(cmbCollege, 0, 282, Short.MAX_VALUE))))))
                .addGap(60, 60, 60))
        );
        panelInfoLayout.setVerticalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfoLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(lblReportHeader7)
                .addGap(26, 26, 26)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProgName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addGap(18, 18, 18)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProgFee, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addGap(18, 18, 18)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtMaximumLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCollege, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addGap(18, 18, 18)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProgDept, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addGap(18, 18, 18)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(lblMatricType))
                .addGap(27, 27, 27)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbProgDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProgDeptActionPerformed
        onChangeSelectedProg(cmbProgDept);
    }//GEN-LAST:event_cmbProgDeptActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (confirmAction("Proceed With Programme Update?")) {
            System.out.println("Prog update confirmed");
            if (validateAllFields()) {
                String progQuery = String.format("Update Programmes set ProgrammeName = '%s', ProgrammeFee = %f, Programme_DeptID = %d, MaximumLevel = %d "
                        + " where ProgrammeID = %d;",
                        txtProgName.getText().trim(),
                        getUnformattedCurrencyValue(txtProgFee.getText().trim()),
                        newDept.getDeptId(),
                        Integer.parseInt(txtMaximumLevel.getText().trim()),
                        programme.getProgrammeId());

                boolean progUpdated = server.sendUpdateQuery(progQuery);

                if (progUpdated) {
                    if (newDept.getDeptId() != programme.getDeptId()) {
                        if (updateStudentsMatricNo(server, programme.getProgrammeId(), newDept.getDeptId(), newDept.getProgNumber(), oldDept.getProgNumber())) {
                            displayMessage("Programme has been updated and department changed", "Programme Update Successful");
                        } else {
                            displayErrorMessage("Error in updating students matric no on change of department that belong to this programme", "Matric No Update Failed");
                        }
                    } else {
                        displayMessage("Programme has been updated", "Programme Update Successful");
                    }

                    dispose();
                } else {
                    displayErrorMessage("Error in updating programme. Contact admin", "Update Failed");
                    dispose();
                }

            } else {
                displayErrorMessage("A wrong value has been entered into one of the fields. Please check through", "Update Failed");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbCollegeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCollegeActionPerformed
        onChangeSelectedCollege(cmbCollege, cmbProgDept, true);
    }//GEN-LAST:event_cmbCollegeActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (confirmAction("Exit Programme Update")) {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * When the programme department combo changes value initialize the global
     * dept variable
     *
     * @param cmbDept
     * @param cmbProgramme
     */
    private void onChangeSelectedProg(JComboBox<String> cmbProgDept) {
        if (cmbProgDept.getSelectedItem() != null) {
            String selected = cmbProgDept.getSelectedItem().toString();
            newDept = deptFull.stream().filter(dept -> dept.toString().trim().equalsIgnoreCase(selected.trim())).findFirst().orElse(null);
            lblMatricType.setText(String.valueOf(generateMatricType(newDept.getDeptId())));
        }
    }

    @Override
    protected final void initPanel() {
        Department deptLocal = deptFull.stream().filter(dept -> dept.getDeptId() == programme.getDeptId()).findFirst().get();
        oldDept = deptLocal;
        txtProgName.setText(programme.getProgrammeName());
        txtProgFee.setText(getFormattedCurrencyValue(programme.getProgrammeFee()));
        txtMaximumLevel.setText(String.valueOf(programme.getMaximumLevel()));
        lblMatricType.setText(String.valueOf(programme.getMatricType()));

        Stream<College> colStream = collegeFull.stream().filter(col -> col.getCollegeDeptNumber() > 0);
        ArrayList<College> colList = new ArrayList<>(colStream.collect(Collectors.toList()));
        initCombo(cmbCollege, colList);

        int count = 0;
        for (College col : colList) {
            if (col.getCollegeId() == deptLocal.getCollegeId()) {
                cmbCollege.setSelectedIndex(count);
            } else {
                ++count;
            }
        }

        for (Department dep : deptFull) {
            if (dep.getDeptName().equalsIgnoreCase(deptLocal.getDeptName())) {
                cmbProgDept.setSelectedItem(dep.getDeptName());
            }
        }
    }

    @Override
    protected boolean validateAllFields() {
        boolean validData = true;

        if (!(fieldHasData(txtProgName) && validateTextLetter(txtProgName))) {
            setErrorBorder(txtProgName, true);
            validData = false;
        } else {
            setErrorBorder(txtProgName, false);
        }
        if (!(fieldHasData(txtMaximumLevel) && validateTextNumber(txtMaximumLevel))) {
            setErrorBorder(txtMaximumLevel, true);
            validData = false;
        } else {
            setErrorBorder(txtMaximumLevel, false);
        }
        String txtValue = String.valueOf(getUnformattedCurrencyValue(txtProgFee.getText().trim()));
        if (!(fieldHasCurrencyData(txtValue) && validateTextCurrency(txtValue))) {
            setErrorBorder(txtProgFee, true);
            validData = false;
        } else {
            setErrorBorder(txtProgFee, false);
        }
        if (!valueSelectedCombo(cmbProgDept)) {
            setErrorBorder(cmbProgDept, true);
            validData = false;
        } else {
            setErrorBorder(cmbProgDept, false);
        }

        return validData;
    }

    /**
     * Generates a matrictype according to the number of programmes in that
     * department
     *
     * @param deptID
     * @return
     */
    private int generateMatricType(int deptID) {
        String initial = "15020";
        String finalVal = initial + deptID;

        String matricQuery = String.format("Select Max(MatricType) as MatricType from Programmes where Programme_DeptID = %d;", deptID);

        String matricTemp = String.valueOf(server.getQuerySingleResult(matricQuery, "MatricType"));
        System.out.println("MatricTemp: " + matricTemp);

        if (!(matricTemp.equalsIgnoreCase("null"))) {
            int matric = Integer.parseInt(matricTemp.substring(matricTemp.length() - 1)); //gets 1
            matric++; //increment it to 2

            System.out.println("Final MatricVal: " + (finalVal + matric));
            return Integer.parseInt(finalVal + matric);
        } else {
            return Integer.parseInt(finalVal + "0");
        }
    }

    /**
     * Updates other tables data if the department of the programme was changed
     *
     * @param server
     * @param progID
     * @param newDeptID
     * @param newDeptProgCount
     * @param oldDeptProgCount
     * @return
     */
    private boolean updateStudentsMatricNo(MainServer server, int progID, int newDeptID, int newDeptProgCount, int oldDeptProgCount) {
        ArrayList<Student> list = server.getStudents(progID);

        if (list.size() > 0) {
            for (Student stu : list) {
                int matricNo = stu.getMatricNo();
                String matricString = String.valueOf(matricNo);

                String matricBegin = matricString.substring(0, 5);
                String matricEnd = matricString.substring(matricString.length() - 2);

                String newMatNum = matricBegin + String.valueOf(newDeptID) + String.valueOf((++newDeptProgCount)) + matricEnd;

                String query = String.format("Update Students set MatricNo = %d where Student_ProgrammeID = %d",
                        Integer.parseInt(newMatNum),
                        progID);

                if (!server.sendUpdateQuery(query)) {
                    return false;
                } else {
                    String oldDeptQuery = String.format("Update Departments set Dept_ProgrammeNumber = %d where DeptID = %d;",
                            (--oldDeptProgCount),
                            oldDept.getDeptId());

                    if (!server.sendUpdateQuery(oldDeptQuery)) {
                        return false;
                    } else {
                        String loginQuery = String.format("Update Login set Username = '%s' where LoginID = %d", newMatNum, stu.getLoginId());
                        return server.sendUpdateQuery(loginQuery);
                    }
                }
            }

            return true;
        } else {
//            show error that list could not be gotten
            return false;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCollege;
    private javax.swing.JComboBox<String> cmbProgDept;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel lblMatricType;
    private javax.swing.JLabel lblReportHeader7;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JTextField txtMaximumLevel;
    private javax.swing.JTextField txtProgFee;
    private javax.swing.JTextField txtProgName;
    // End of variables declaration//GEN-END:variables

}
