package frontend;

import backend.MainServer;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import pojo.CarryOvers;
import pojo.College;
import pojo.Course;
import pojo.Department;
import pojo.Programme;
import pojo.RegisteredCourses;
import pojo.Roles;
import pojo.SessionDetails;
import pojo.Staff;
import pojo.Student;

/**
 *
 * @author Fego
 */
public abstract class AbstractViewFrame extends AbstractServerFrame {

    protected Dimension showCourseInfoSize = new Dimension(559, 380);
    protected Path defaultPassportUrl = Paths.get("");
    
    //Student Details Classes for students
    protected Student student;
    protected College college;
    protected Department dept;
    protected CarryOvers carryOver;
    protected RegisteredCourses regCourses;
    protected Programme programme;
    protected SessionDetails session;
    protected Course newCourses;
    protected Staff staff;
    protected Course course;

    /**
     * Creates new form AbstractViewFrame
     */
    public AbstractViewFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Custom Methods
    /**
     * Initializes any table with values from the courseMap
     *
     * @param table the JList to be initialized
     * @param courseList the list to get data from
     */
    protected void initTable(JTable table, ArrayList<Course> courseList) {
        DefaultTableModel model = new DefaultTableModel(); //get the model of the list

        //Set model properties
        model.setColumnCount(2);
        model.setColumnIdentifiers(new String[]{"Course Code", "Credit Units"}); //Set the table header

        //Set rows from data provided
        courseList.stream().forEach((course) -> model.addRow(new String[]{course.getCourseCode(), String.valueOf(course.getCreditUnits())}));
        table.setModel(model); //set model
    }

    protected void initTableNoData(JTable table) {
        DefaultTableModel model = new DefaultTableModel(); //get the model of the list

        //Set model properties
        model.setColumnCount(2);
        model.setRowCount(0);
        model.setColumnIdentifiers(new String[]{"Course Code", "Credit Units"}); //Set the table header
        table.setModel(model); //set model
    }

    /**
     * Checks for null values
     *
     * @param obj object to be tested for null
     * @return A string representation of that object
     */
    protected String checkNull(Object obj) {
        if (obj == null) {
            return "N/A";
        } else {
            return obj.toString();
        }
    }

    protected void loseFocus(JTable table) {
        table.clearSelection();
    }

    /**
     * Initializes the student data in the class that can be used at any time
     *
     * @param records
     */
    protected final void initData(ArrayList<ArrayList<?>> records) {
        System.out.println("In init data working with lists ending with List e.g collegeList");
        for (ArrayList<?> record : records) {
            System.out.println("Record Length: " + record.size());
            if (record.size() > 0 && record.get(0) instanceof Student) {
                System.out.println("Found student object");
                for (Object data : record) {
                    System.out.println("MatricNo: " + ((Student) data).getMatricNo());
                    studentList.add((Student) data);
                }
            } else if (record.size() > 0 && record.get(0) instanceof College) {
                System.out.println("found college object");
                for (Object data : record) {
                    collegeList.add((College) data);
                }
            } else if (record.size() > 0 && record.get(0) instanceof Programme) {
                System.out.println("found programme");
                for (Object data : record) {
                    progList.add((Programme) data);
                }
            } else if (record.size() > 0 && record.get(0) instanceof Department) {
                System.out.println("Found dept");
                for (Object data : record) {
                    deptList.add((Department) data);
                }
            } else if (record.size() > 0 && record.get(0) instanceof CarryOvers) {
                System.out.println("Found carry over");
                for (Object data : record) {
                    carryOverList.add((CarryOvers) data);
                }
            } else if (record.size() > 0 && record.get(0) instanceof RegisteredCourses) {
                System.out.println("Found registered courses");
                for (Object data : record) {
                    regCoursesList.add((RegisteredCourses) data);
                }
            } else if (record.size() > 0 && record.get(0) instanceof SessionDetails) {
                System.out.println("FOund session details");
                for (Object data : record) {
                    sessionList.add((SessionDetails) data);
                }
            } else if (record.size() > 0 && record.get(0) instanceof Course) {
                System.out.println("Found course");
                for (Object student : record) {
                    coursesList.add((Course) student);
                }
            } else if (record.size() > 0 && record.get(0) instanceof Staff) {
                System.out.println("Found staff");
                for (Object staff : record) {
                    staffList.add((Staff) staff);
                }
            }
        }
    }

    protected final ArrayList<ArrayList<?>> getStudentData(MainServer server) {
        String query = getStudentsQuery();

        ArrayList<ArrayList<?>> records = new ArrayList<>();

        //get all student data
        Object[] data = server.getResultSet(query);
        try (Statement st = (Statement) data[0];
                ResultSet rs = (ResultSet) data[1]) {
            //An arraylist of student data
            ArrayList<Student> studentsList = new ArrayList<>();
            ArrayList<Programme> programmesList = new ArrayList<>();
            ArrayList<Department> deptsList = new ArrayList<>();
            ArrayList<College> collegesList = new ArrayList<>();
            ArrayList<CarryOvers> carOvsList = new ArrayList<>();
            ArrayList<RegisteredCourses> regsList = new ArrayList<>();
            ArrayList<SessionDetails> sessionsList = new ArrayList<>();
            ArrayList<Course> coursesList = new ArrayList<>();

            boolean contains = false;
            int count = 0; //Counter for result set
            while (rs.next()) {
                contains = false;

                //Students
                Student stu = new Student();

                int matric = rs.getInt("MatricNo");
                for (Student student : studentsList) {
                    if (student.getMatricNo() == matric) {
                        contains = true;
                    }
                }

                if (!contains) {
                    stu.setMatricNo(matric);
                    stu.setAge(rs.getInt("Age"));
                    stu.setCourseAdvisorApproved(rs.getBoolean("CourseAdvisorApproved"));
                    stu.setHODApproved(rs.getBoolean("HODApproved"));
                    stu.setDeanApproved(rs.getBoolean("DeanApproved"));
                    stu.setRegistrationAllowed(rs.getBoolean("RegistrationAllowed"));
                    stu.setFeeBalance(rs.getDouble("FeeBalance"));
                    stu.setGpa(rs.getDouble("Gpa"));
                    stu.setLastName(rs.getString("LastName"));
                    stu.setFirstName(rs.getString("FirstName"));
                    stu.setLevel(rs.getInt("Level"));
                    stu.setLoginId(rs.getInt("Student_LoginId"));
                    stu.setStudentMaxUnits(rs.getInt("Student_MaxUnits"));
                    stu.setPassport(getPassport(Paths.get(rs.getString("Picture"))));
                    stu.setPassportUrlString(rs.getString("Picture"));
                    stu.setProgrammeId(rs.getInt("Student_ProgrammeID"));
                    stu.setStuRegistered(rs.getBoolean("StudentRegistered"));
                    studentsList.add(stu);
                }

                contains = false;

                //Colleges
                College col = new College();
                for (College college : collegesList) {
                    if (college.getCollegeMatricNo() == matric) {
                        contains = true;
                    }
                }
                if (!contains) {
                    col.setCollegeId(rs.getInt("CollegeID"));
                    col.setCollegeName(rs.getString("CollegeName"));
                    col.setCollegeMatricNo(rs.getInt("MatricNo"));
                    collegesList.add(col); //Add college
                }

                contains = false;

                //Departments
                Department dept = new Department();
                for (Department deptLocal : deptsList) {
                    if (deptLocal.getDeptMatricNo() == matric) {
                        contains = true;
                    }
                }

                if (!contains) {
                    dept.setDeptId(rs.getInt("DeptID"));
                    dept.setDeptHeadStaffID(rs.getInt("DeptHead_StaffID"));
                    dept.setDeptName(rs.getString("DeptName"));
                    dept.setDeptCollegeId(rs.getInt("Dept_CollegeID"));
                    dept.setDeptMatricNo(rs.getInt("MatricNo"));
                    dept.setDeptCollege(col);
                    dept.setStudent(stu);
                    deptsList.add(dept);
                }

                contains = false;

                //Programmes
                Programme prog = new Programme();
                for (Programme progLocal : programmesList) {
                    if (progLocal.getProgrammeMatricNo() == matric) {
                        contains = true;
                    }
                }

                if (!contains) {
                    prog.setProgrammeId(rs.getInt("ProgrammeID"));
                    prog.setProgrammeName(rs.getString("ProgrammeName"));
                    prog.setMaximumLevel(rs.getInt("MaximumLevel"));
                    prog.setProgrammeFee(rs.getDouble("ProgrammeFee"));
                    prog.setProgrammeMatricNo(rs.getInt("MatricNo"));
                    prog.setDeptId(rs.getInt("Programme_DeptID"));
                    prog.setProgrammeDept(dept);
                    prog.setStudent(stu);
                    programmesList.add(prog);
                }

                contains = false;

                //Courses
                String courseCode = rs.getString("CourseCode");
                for (Course courseLocal : coursesList) {
                    if (courseLocal.getCourseCode().equalsIgnoreCase(courseCode)) {
                        if (courseLocal.getCourseMatricNo() == matric) {
                            contains = true;
                            break;
                        }
                    }
                }

                if (courseCode != null && !(contains)) {
                    Course course = new Course();
                    course.setCourseCode(rs.getString("CourseCode"));
                    course.setCourseName(rs.getString("CourseName"));
                    course.setCourseStatus(rs.getString("CourseStatus"));
                    course.setCourseMatricNo(matric);
                    course.setCreditUnits(rs.getInt("CreditUnits"));
                    course.setLevel(rs.getInt("Course_Level"));
                    course.setProgrammeId(rs.getInt("Course_ProgrammeID"));
                    course.setProgramme(prog);
                    course.setStudent(stu);
                    coursesList.add(course);
                }

                contains = false;

                //Carry Overs
                String carry_courseCode = rs.getString("Carry_CourseCode");
                int carryMatric = rs.getInt("Carry_MatricNo");

                for (CarryOvers carryLocal : carOvsList) {
                    if (carryLocal.getCarryOverCourse().getCourseCode().equalsIgnoreCase(carry_courseCode)) {
                        if (carryLocal.getCarryMatricNo() == carryMatric) {
                            contains = true;
                        }
                    }
                }

                if (carry_courseCode != null && !contains) {
                    CarryOvers carry = new CarryOvers();
                    carry.setCarryMatricNo(rs.getInt("Carry_MatricNo"));
                    carry.setExists(true);
                    carry.setSessionId(rs.getInt("Carry_SessionID"));
                    carry.setCarryTreeStudent(stu);
                    carry.setCarryOverCourse(setupCourseWithQuery(server, stu.getMatricNo(), carry_courseCode));
                    carOvsList.add(carry);
                }

                contains = false;

                //Registered Courses
                String reg_courseCode = rs.getString("Reg_CourseCode");
                int regMatric = rs.getInt("Reg_MatricNo");
                for (RegisteredCourses regLocal : regsList) {
                    if (regLocal.getRegCourse().getCourseCode().equalsIgnoreCase(reg_courseCode)) {
                        if (regLocal.getRegMatricNo() == regMatric) {
                            contains = true;
                        }
                    }
                }

                if (reg_courseCode != null && !contains) {
                    RegisteredCourses reg = new RegisteredCourses();
                    reg.setRegMatricNo(rs.getInt("Reg_MatricNo"));
                    reg.setExists(true);
                    reg.setSessionId(rs.getInt("Reg_SessionID"));
                    reg.setRegStudent(stu);
                    reg.setRegCourse(setupCourseWithQuery(server, stu.getMatricNo(), reg_courseCode));
                    regsList.add(reg);
                }

                contains = false;

                //SessionDetails
                SessionDetails session = new SessionDetails();

                for (SessionDetails sessLocal : sessionsList) {
                    if (sessLocal.getSessionMatricNo() == matric) {
                        contains = true;
                    }
                }

                if (!contains) {
                    session.setSessionName(rs.getString("SessionName"));
                    session.setMaximumUnits(rs.getInt("MaximumUnits"));
                    session.setSemester(rs.getString("Semester"));
                    session.setSessionId(rs.getInt("SessionID"));
                    session.setSessionMatricNo(matric);
                    sessionsList.add(session);
                }

                contains = false;
            }

            records.add(studentsList);
            records.add(collegesList);
            records.add(deptsList);
            records.add(programmesList);
            records.add(sessionsList);
            records.add(coursesList);
            records.add(carOvsList);
            records.add(regsList);

            return records;
        } catch (SQLException sq) {
            sq.printStackTrace();
            logger.logErrorNormal("Unable to retreive data from database", sq);
        }

        return null;
    }

    protected final ArrayList<ArrayList<?>> getStaffData(MainServer server) {
        String query = getStaffQuery();

        ArrayList<ArrayList<?>> records = new ArrayList<>();

        //get all student data
        Object[] data = server.getResultSet(query);
        try (Statement st = (Statement) data[0];
                ResultSet rs = (ResultSet) data[1]) {
            //An arraylist of student data
            ArrayList<Staff> staffList = new ArrayList<>();
            ArrayList<Department> deptsList = new ArrayList<>();
            ArrayList<College> collegesList = new ArrayList<>();

            boolean contains = false;
            int count = 0; //Counter for result set
            while (rs.next()) {
                contains = false;

                //Students
                Staff stf = new Staff();

                int staffID = rs.getInt("StaffID");
                for (Staff staff : staffList) {
                    if (staff.getStaffId() == staffID) {
                        contains = true;
                    }
                }

                if (!contains) {
                    stf.setStaffId(staffID);
                    stf.setLoginId(rs.getInt("Staff_LoginID"));
                    stf.setFirstName(rs.getString("FirstName"));
                    stf.setLastName(rs.getString("LastName"));
                    stf.setRoleId(rs.getInt("Staff_RoleID"));
                    stf.setDeptId(rs.getInt("Staff_DeptID"));
                    stf.setPassport(getPassport(Paths.get(rs.getString("StaffPassport"))));
                    stf.setPassportUrlString(rs.getString("StaffPassport"));
                    staffList.add(stf);
                }

                contains = false;

                //Colleges
                College col = new College();
                int colID = rs.getInt("CollegeID");
                for (College college : collegesList) {
                    if (college.getCollegeMatricNo() == colID) {
                        contains = true;
                    }
                }
                if (!contains) {
                    col.setCollegeId(colID);
                    col.setCollegeName(rs.getString("CollegeName"));
                    col.setCollegeStaffID(stf.getStaffId());
                    collegesList.add(col); //Add college
                }

                contains = false;

                //Departments
                Department dept = new Department();
                int deptID = rs.getInt("DeptID");
                for (Department deptLocal : deptsList) {
                    if (deptLocal.getDeptId() == deptID) {
                        contains = true;
                    }
                }

                if (!contains) {
                    dept.setDeptId(deptID);
                    dept.setDeptHeadStaffID(rs.getInt("DeptHead_StaffID"));
                    dept.setDeptName(rs.getString("DeptName"));
                    dept.setDeptCollegeId(rs.getInt("Dept_CollegeID"));
                    dept.setDeptCollege(col);
                    dept.setDeptStaffID(stf.getStaffId());
                    deptsList.add(dept);
                }

                contains = false;
            }

            records.add(staffList);
            records.add(collegesList);
            records.add(deptsList);

            return records;
        } catch (SQLException sq) {
            sq.printStackTrace();
            logger.logErrorNormal("Unable to retreive data from database", sq);
        }

        return null;
    }

    protected final ArrayList<ArrayList<?>> getOtherData(MainServer server) {
        String query = getOtherQuery();

        ArrayList<ArrayList<?>> records = new ArrayList<>();

        //get all student data
        Object[] data = server.getResultSet(query);
        try (Statement st = (Statement) data[0];
                ResultSet rs = (ResultSet) data[1]) {
            //An arraylist of student data
            ArrayList<Department> deptsList = new ArrayList<>();
            ArrayList<College> collegesList = new ArrayList<>();
            ArrayList<Programme> programmesList = new ArrayList<>();
            ArrayList<Course> courseList = new ArrayList<>();

            boolean contains = false;
            int count = 0; //Counter for result set
            while (rs.next()) {
                contains = false;

                //Colleges
                College col = new College();
                int colID = rs.getInt("CollegeID");
                for (College college : collegesList) {
                    if (college.getCollegeId() == colID) {
                        contains = true;
                    }
                }
                if (!contains) {
                    col.setCollegeId(colID);
                    col.setCollegeName(rs.getString("CollegeName"));
                    col.setFullCollegeName(rs.getString("CollegeFullName"));
                    col.setCollegeDeptNumber(rs.getInt("College_DeptNumber"));
                    collegesList.add(col); //Add college
                }

                contains = false;

                //Departments
                Department dept = new Department();
                int deptID = rs.getInt("DeptID");
                for (Department deptLocal : deptsList) {
                    if (deptLocal.getDeptId() == deptID) {
                        contains = true;
                    }
                }

                if (!contains) {
                    dept.setDeptId(deptID);
                    dept.setDeptHeadStaffID(rs.getInt("DeptHead_StaffID"));
                    dept.setDeptName(rs.getString("DeptName"));
                    dept.setDeptCollegeId(rs.getInt("Dept_CollegeID"));
                    dept.setProgNumber(rs.getInt("Dept_ProgrammeNumber"));
                    dept.setStaffNumber(rs.getInt("Dept_StaffNumber"));
                    if (dept.getDeptName() != null) {
                        deptsList.add(dept);
                    }
                }

                contains = false;

                //Programmes
                Programme prog = new Programme();
                int progID = rs.getInt("ProgrammeID");
                for (Programme progLocal : programmesList) {
                    if (progLocal.getProgrammeId() == progID) {
                        contains = true;
                    }
                }

                if (!contains) {
                    prog.setProgrammeId(rs.getInt("ProgrammeID"));
                    prog.setProgrammeName(rs.getString("ProgrammeName"));
                    prog.setMaximumLevel(rs.getInt("MaximumLevel"));
                    prog.setProgrammeFee(rs.getDouble("ProgrammeFee"));
                    prog.setDeptId(rs.getInt("Programme_DeptID"));
                    prog.setProgCourseNumber(rs.getInt("Programme_CourseNumber"));
                    prog.setMatricType(rs.getInt("MatricType"));
                    prog.setStudentNumber(rs.getInt("StudentsNumber"));
                    if (prog.getProgrammeName() != null) {
                        programmesList.add(prog);
                    }
                }

                contains = false;

                //Courses
                Course course = new Course();
                String courseCode = rs.getString("CourseCode");
                for (Course courseLocal : coursesList) {
                    if (courseLocal.getCourseCode().equalsIgnoreCase(courseCode)) {
                        contains = true;
                        break;
                    }
                }

                if (courseCode != null && !(contains)) {
                    course.setCourseCode(rs.getString("CourseCode"));
                    course.setCourseName(rs.getString("CourseName"));
                    course.setCourseStatus(rs.getString("CourseStatus"));
                    course.setCreditUnits(rs.getInt("CreditUnits"));
                    course.setLevel(rs.getInt("Course_Level"));
                    course.setProgrammeId(rs.getInt("Course_ProgrammeID"));
                    if (course.getCourseCode() != null) {
                        courseList.add(course);
                    }
                }

                contains = false;
            }

            records.add(collegesList);
            records.add(deptsList);
            records.add(programmesList);
            records.add(courseList);

            return records;
        } catch (SQLException sq) {
            sq.printStackTrace();
            logger.logErrorNormal("Unable to retreive data from database", sq);
        }

        return null;
    }

    /**
     * Setting up a course object by retrieving it from the db and then
     * returning it
     *
     * @param server
     * @param matricNo
     * @param courseCode
     * @return
     */
    protected Course setupCourseWithQuery(MainServer server, int matricNo, String courseCode) {
        String queryCourse = String.format("Select * from Courses where CourseCode = '%s';", courseCode);

        Object[] data = server.getResultSet(queryCourse);
        try (Statement st = (Statement) data[0];
                ResultSet rsIn = (ResultSet) data[1]) {//set and get the carry over courses' details
            if (rsIn.next()) {
                Course carryCourse = setCourse(courseCode,
                        rsIn.getString("CourseName"),
                        rsIn.getString("CourseStatus"),
                        matricNo,
                        rsIn.getInt("CreditUnits"),
                        rsIn.getInt("Course_Level"),
                        rsIn.getInt("Course_ProgrammeID"),
                        null);

                return carryCourse;
            } else {
                return null;
            }
        } catch (SQLException sq) {
            logger.logErrorNormal("Unable to get carry over full course details", sq);
            return null;
        }
    }

    /**
     * Initializing A course object
     *
     * @param code
     * @param name
     * @param status
     * @param matric
     * @param creditUnit
     * @param level
     * @param progID
     * @param prog
     * @return
     */
    protected Course setCourse(String code, String name, String status, int matric, int creditUnit, int level, int progID, Programme prog) {
        Course course = new Course();
        course.setCourseCode(code);
        course.setCourseName(name);
        course.setCourseStatus(status);
        course.setCourseMatricNo(matric);
        course.setCreditUnits(creditUnit);
        course.setLevel(level);
        course.setProgrammeId(progID);
        course.setProgramme(prog);

        return course;
    }

    protected String getStudentsQuery() {
        return "select * from students \n"
                + "inner join programmes on students.student_programmeid = programmes.ProgrammeID\n"
                + "inner join departments on programmes.programme_deptid = departments.deptid\n"
                + "inner join colleges on departments.dept_CollegeID = colleges.CollegeID\n"
                + "left join (select carryovers.*, courses.creditunits as Carry_CreditUnits from carryovers,courses \n"
                + "				where carryovers.carry_coursecode = courses.coursecode) \n"
                + "as CarryOvers on students.MatricNo = carryovers.Carry_MatricNo\n"
                + "left join (select registeredcourses.*, courses.creditunits as Reg_CreditUnits from registeredcourses,courses \n"
                + "				where registeredcourses.Reg_CourseCode = courses.coursecode\n"
                + "				and registeredcourses.reg_sessionid = (select count(*) from sessiondetails)) \n"
                + "as RegisteredCourses on registeredcourses.Reg_MatricNo = students.MatricNo\n"
                + "inner join sessiondetails on sessiondetails.SessionID = (select count(*) from sessiondetails)\n"
                + "left join courses on courses.course_level = students.level and courses.course_programmeid = students.student_ProgrammeID;";
    }

    protected String getStaffQuery() {
        String query = String.format("select * from staffs\n"
                + "inner join departments on staffs.staff_deptid = departments.DeptID\n"
                + "inner join colleges on departments.Dept_CollegeID = colleges.CollegeID;");

        return query;
    }

    protected String getOtherQuery() {
        String query = String.format("select * from colleges\n"
                + "left join departments on CollegeID = Dept_CollegeID\n"
                + "left join programmes on DeptID = Programme_DeptID\n"
                + "left join courses on ProgrammeID = Course_ProgrammeID;");

        return query;
    }

    /**
     * For getting the passport picture
     *
     * @param imagePath
     * @return
     */
    protected ImageIcon getPassport(Path imagePath) {
        BufferedImage passport = null;
        try {
            passport = ImageIO.read(imagePath.toFile());
        } catch (IOException io) {
            try {
                System.out.println("Couldn't find the passport picture for this student, supplying default");
                passport = ImageIO.read(defaultPassportUrl.toFile());
                System.out.println("Default supplied");
            } catch (IOException ioo) {
                System.out.println("Could not find the default, supplying nothing");
                passport = new BufferedImage(200, 200, BufferedImage.TYPE_INT_ARGB);
                System.out.println("nothing supplied");
            }
        }

        System.out.println("Returning image");
        return new ImageIcon(passport);
    }

    /**
     * Initializes the table with the students data
     *
     * @param table table to be initialized
     * @param studentList
     * @param columnNames
     */
    protected final void initTableRecordsStudent(JTable table, ArrayList<Student> studentList, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnIdentifiers(columnNames);

        studentList.forEach(student -> model.addRow(new Object[]{
            student.getMatricNo(),
            student.getLastName(),
            student.getFirstName()
        }));

        table.setModel(model);
    }

    /**
     * Initializes the table with the students data
     *
     * @param table table to be initialized
     * @param staffList
     * @param rolesFull
     * @param columnNames
     */
    protected final void initTableRecordsStaff(JTable table, ArrayList<Staff> staffList, ArrayList<Roles> rolesFull, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnIdentifiers(columnNames);

        staffList.forEach(staff -> model.addRow(new Object[]{
            staff.getStaffId(),
            staff.getLastName(),
            staff.getFirstName(),
            rolesFull.stream().filter(role -> role.getRoleId() == staff.getRoleId()).findFirst().orElse(null)
        }));

        table.setModel(model);
    }

    protected final void initTableRecordsCollege(JTable table, ArrayList<College> collegeList, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnIdentifiers(columnNames);

        collegeList.forEach(college -> model.addRow(new Object[]{
            college.getCollegeId(),
            college.getCollegeName(),}));

        table.setModel(model);
    }

    /**
     * Initializes the table with the students data
     *
     * @param table table to be initialized
     * @param deptList
     * @param columnNames
     */
    protected final void initTableRecordsDept(JTable table, ArrayList<Department> deptList, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnIdentifiers(columnNames);

        deptList.forEach(depts -> model.addRow(new Object[]{
            depts.getDeptId(),
            depts.getDeptName(),}));

        table.setModel(model);
    }

    /**
     * Initializes the table with the students data
     *
     * @param table table to be initialized
     * @param progList
     * @param columnNames
     */
    protected final void initTableRecordsProg(JTable table, ArrayList<Programme> progList, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnIdentifiers(columnNames);

        progList.forEach(progs -> model.addRow(new Object[]{
            progs.getProgrammeId(),
            progs.getProgrammeName()}));

        table.setModel(model);
    }

    /**
     * Initializes the table with the students data
     *
     * @param table table to be initialized
     * @param coursesList
     * @param columnNames
     */
    protected final void initTableRecordsCourse(JTable table, ArrayList<Course> coursesList, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnIdentifiers(columnNames);

        coursesList.forEach(cou -> model.addRow(new Object[]{
            cou.getCourseCode(),
            cou.getCourseName()}));

        table.setModel(model);
    }

    /**
     * For searching students on a table
     *
     * @param tbl
     * @param studentList
     * @param searchType
     * @param text
     * @param columnNames
     */
    protected void searchStudent(JTable tbl, ArrayList<Student> studentList, String searchType, String text, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);
        ArrayList<Student> list;

        if (searchType.equalsIgnoreCase("Matric No")) {
            try (Stream<Student> filtered = studentList.stream().filter(stu -> String.valueOf(stu.getMatricNo()).contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsStudent(tbl, list, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("Last Name")) {
            try (Stream<Student> filtered = studentList.stream().filter(stu -> stu.getLastName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsStudent(tbl, list, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("First Name")) {
            try (Stream<Student> filtered = studentList.stream().filter(stu -> stu.getFirstName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsStudent(tbl, list, columnNames);
            }
        }

        tbl.setModel(model);
    }

    /**
     * Searching for staffs in a table
     *
     * @param tbl
     * @param staffList
     * @param rolesFull
     * @param searchType
     * @param text
     * @param columnNames
     */
    protected void searchStaff(JTable tbl, ArrayList<Staff> staffList, ArrayList<Roles> rolesFull, String searchType, String text, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);
        ArrayList<Staff> list;

        if (searchType.equalsIgnoreCase("StaffID")) {
            try (Stream<Staff> filtered = staffList.stream().filter(stf -> String.valueOf(stf.getStaffId()).contains(text.trim()));) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsStaff(tbl, list, rolesFull, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("Last Name")) {
            try (Stream<Staff> filtered = staffList.stream().filter(stf -> stf.getLastName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsStaff(tbl, list, rolesFull, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("First Name")) {
            try (Stream<Staff> filtered = staffList.stream().filter(stf -> stf.getFirstName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsStaff(tbl, list, rolesFull, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("Staff Role")) {
            try (Stream<Staff> filtered = staffList.stream().filter(stf -> {
                String rol = rolesFull.stream().filter(role -> role.getRoleId() == stf.getRoleId()).findFirst().get().getRoleName().toLowerCase();
                return rol.contains(text.trim().toLowerCase());
            })) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsStaff(tbl, list, rolesFull, columnNames);
                
            }
        }

        tbl.setModel(model);
    }
    
    /**
     * Searching for staffs in a table
     *
     * @param tbl
     * @param collegeList
     * @param rolesFull
     * @param searchType
     * @param text
     * @param columnNames
     */
    protected void searchCollege(JTable tbl, ArrayList<College> collegeList,  String searchType, String text, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);
        ArrayList<College> list;

        if (searchType.equalsIgnoreCase("College ID")) {
            try (Stream<College> filtered = collegeList.stream().filter(col -> String.valueOf(col.getCollegeId()).contains(text.trim()));) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsCollege(tbl, list, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("College Name")) {
            try (Stream<College> filtered = collegeList.stream().filter(stf -> stf.getCollegeName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsCollege(tbl, list, columnNames);
            }
        } 

        tbl.setModel(model);
    }
    
    /**
     * Searching for staffs in a table
     *
     * @param tbl
     * @param deptList
     * @param rolesFull
     * @param searchType
     * @param text
     * @param columnNames
     */
    protected void searchDept(JTable tbl, ArrayList<Department> deptList,  String searchType, String text, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);
        ArrayList<Department> list;

        if (searchType.equalsIgnoreCase("Department ID")) {
            try (Stream<Department> filtered = deptList.stream().filter(dep -> String.valueOf(dep.getDeptId()).contains(text.trim()));) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsDept(tbl, list, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("Department Name")) {
            try (Stream<Department> filtered = deptList.stream().filter(dep -> dep.getDeptName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsDept(tbl, list, columnNames);
            }
        } 

        tbl.setModel(model);
    }
    
    /**
     * Searching for staffs in a table
     *
     * @param tbl
     * @param progList
     * @param rolesFull
     * @param searchType
     * @param text
     * @param columnNames
     */
    protected void searchProgr(JTable tbl, ArrayList<Programme> progList,  String searchType, String text, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);
        ArrayList<Programme> list;

        if (searchType.equalsIgnoreCase("Programme ID")) {
            try (Stream<Programme> filtered = progList.stream().filter(pro -> String.valueOf(pro.getProgrammeId()).contains(text.trim()));) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsProg(tbl, list, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("Programme Name")) {
            try (Stream<Programme> filtered = progList.stream().filter(pro -> pro.getProgrammeName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsProg(tbl, list, columnNames);
            }
        } 

        tbl.setModel(model);
    }
    
    /**
     * Searching for staffs in a table
     *
     * @param tbl
     * @param courseList
     * @param rolesFull
     * @param searchType
     * @param text
     * @param columnNames
     */
    protected void searchCourse(JTable tbl, ArrayList<Course> courseList,  String searchType, String text, String[] columnNames) {
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);
        ArrayList<Course> list;

        if (searchType.equalsIgnoreCase("Course Code")) {
            try (Stream<Course> filtered = courseList.stream().filter(co -> co.getCourseCode().toLowerCase().contains(text.trim()));) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsCourse(tbl, list, columnNames);
            }
        } else if (searchType.equalsIgnoreCase("Course Name")) {
            try (Stream<Course> filtered = courseList.stream().filter(stf -> stf.getCourseName().toLowerCase().contains(text.trim().toLowerCase()))) {
                list = new ArrayList<>(filtered.collect(Collectors.toList()));
                initTableRecordsCourse(tbl, list, columnNames);
            }
        } 

        tbl.setModel(model);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
