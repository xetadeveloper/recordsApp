package frontend;

import backend.MainClient;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Fego
 */
public class ClientLoginFrame extends javax.swing.JFrame {

    //Fields
    private MainClient client;
    protected final static int SELECT = 0, INSERT = 1, UPDATE = 2, DELETE = 3, EXIT = 4, GETINFO = 5;

    /**
     * Creates new form LoginFrame
     */
    public ClientLoginFrame() {
        initComponents();
        lblError.setText("");
        setEnterKeyAction();
        System.out.println("About to start mainclient");
        this.client = new MainClient();
        System.out.println("MainClient ready");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        txtUser = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lblPass = new javax.swing.JLabel();
        pswdPass = new javax.swing.JPasswordField();
        lblError = new javax.swing.JLabel();
        lblLogin = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Login");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(245, 245, 245));

        loginPanel.setBackground(new java.awt.Color(226, 231, 232));
        loginPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(102, 102, 102)));
        loginPanel.setToolTipText("Login");

        txtUser.setFont(new java.awt.Font("Segoe UI Historic", 0, 13)); // NOI18N
        txtUser.setToolTipText("username");
        txtUser.setCaretColor(new java.awt.Color(153, 153, 153));

        lblUser.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lblUser.setForeground(new java.awt.Color(51, 51, 51));
        lblUser.setText("USERNAME");
        lblUser.setToolTipText("");

        btnLogin.setFont(new java.awt.Font("Segoe UI Light", 1, 12)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(51, 51, 51));
        btnLogin.setText("LOGIN");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblPass.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lblPass.setForeground(new java.awt.Color(51, 51, 51));
        lblPass.setText("PASSWORD");
        lblPass.setToolTipText("");

        pswdPass.setToolTipText("password");

        lblError.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N
        lblError.setForeground(new java.awt.Color(255, 51, 51));
        lblError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblError.setText("error message");
        lblError.setToolTipText("Error");

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLogin)
                        .addGap(44, 44, 44))
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(loginPanelLayout.createSequentialGroup()
                                .addComponent(lblPass)
                                .addGap(18, 18, 18)
                                .addComponent(pswdPass, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(loginPanelLayout.createSequentialGroup()
                                .addComponent(lblUser)
                                .addGap(18, 18, 18)
                                .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(34, Short.MAX_VALUE))))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPass, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(pswdPass))
                .addGap(18, 18, 18)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblError)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        lblLogin.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        lblLogin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogin.setText("LOGIN");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogin)
                    .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(lblLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        login();
    }//GEN-LAST:event_btnLoginActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int option = JOptionPane.showConfirmDialog(this, "Do you want to quit this session?", "Quit", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            client.sendQueryUTF("exit"); //send server message to exit
            System.exit(0);
        }

    }//GEN-LAST:event_formWindowClosing

    private Object assignFrame(String query) {
        Object data = null;
        try {
            System.out.println("Getting ready status");
            boolean serverReady = (Boolean) client.getResponse();

            if (serverReady) {
                System.out.println("Handler is ready!!");
            } else {
                System.out.println("Server not ready");
            }

            //Send query to get data to the server
            System.out.println("Preparing query");
            System.out.println("Query: " + query);
            String message = String.format(SELECT + ":" + query);

            client.sendQuery(message);
            System.out.println("Sent query to server to retrieve all student's data");

            //Retrieve data from server
            data = client.getResponse();
            System.out.println("Data received");
        } catch (Exception io) {
            io.printStackTrace();
        }

        return data;
    }

    /**
     * For logging in
     */
    private void login() {
        //Validate entry first
        String user = txtUser.getText();
        char[] passwd = pswdPass.getPassword();
        String pass = "";
        for (char c : passwd) {
            pass += c;
        }

        System.out.println("Username: " + user);
        System.out.println("Password: " + pass);

        if (client.validateLogin(user, pass)) {
            lblError.setText("");
            System.out.println("Login found");
            String role = client.getRole().toLowerCase();
            System.out.println("Role of client: " + role);
            //clear text on login frame
            txtUser.setText("");
            pswdPass.setText("");

            //set the matric no for the query
            String query = null;
            String matricNo = user;

            switch (role) {
                case "student":
                    System.out.println("Found student");
                    //get query
                    query = getStudentQuery(matricNo);

                    ArrayList<Object> sdata = (ArrayList<Object>) assignFrame(query);
                    System.out.println("Gotten data for student");

                    //launch student frame
                    System.out.println("Launching Student Frame");
                    new StudentFrame(client, sdata).setVisible(true);
                    System.out.println("Student frame is visible");
                    this.setVisible(false);
                    break;

                case "course advisor":
                    System.out.println("Found Course Advisor");
                    //CA query
                    query = getStaffQuery();
                    System.out.println("Gotten query");
                    //get data
                    ArrayList<ArrayList<Object>> cdata = (ArrayList<ArrayList<Object>>) assignFrame(query);

                    //launch staff frame
                    new StaffFrame(client, cdata).setVisible(true);
                    System.out.println("Staff frame is visible");
                    this.setVisible(false);
                    break;

                case "hod":
                    System.out.println("Found HOD");
                    //HOD query
                    query = getStaffQuery();
                    //get data
                    ArrayList<ArrayList<Object>> hdata = (ArrayList<ArrayList<Object>>) assignFrame(query);

                    //launch staff frame
                    new StaffFrame(client, hdata).setVisible(true);
                    System.out.println("HOD frame is visible");
                    this.setVisible(false);
                    break;

                case "dean":
                    System.out.println("Found Dean");
                    query = getStaffQuery();
                    ArrayList<ArrayList<Object>> ddata = (ArrayList<ArrayList<Object>>) assignFrame(query);

                    //launch staff frame
                    new StaffFrame(client, ddata).setVisible(true);
                    this.setVisible(false);
                    break;

                case "admin":
                    System.out.println("Found Admin");

                    query = getStaffQuery();
                    ArrayList<ArrayList<Object>> adata = (ArrayList<ArrayList<Object>>) assignFrame(query);

                    //launch staff frame
                    new AdminFrame(client, adata).setVisible(true);
                    this.setVisible(false);
                    break;

                default:
                    System.out.println("Role undefined");
            }
        } else {
            lblError.setText("username or password incorrect");
        }
    }

    private String getStaffQuery() {
        return "select * from students \n"
                + "inner join programmes on students.student_programmeid = programmes.ProgrammeID\n"
                + "inner join departments on programmes.programme_deptid = departments.deptid\n"
                + "inner join colleges on departments.dept_CollegeID = colleges.CollegeID\n"
                + "left join (select carryovers.*, courses.creditunits as Carry_CreditUnits from carryovers,courses \n"
                + "				where carryovers.carry_coursecode = courses.coursecode) \n"
                + "as CarryOvers on students.MatricNo = carryovers.Carry_MatricNo\n"
                + "left join (select registeredcourses.*, courses.creditunits as Reg_CreditUnits from registeredcourses,courses \n"
                + "				where registeredcourses.Reg_CourseCode = courses.coursecode\n"
                + "				and registeredcourses.reg_sessionid = (select count(*) from sessiondetails)) \n"
                + "as RegisteredCourses on registeredcourses.Reg_MatricNo = students.MatricNo\n"
                + "inner join sessiondetails on sessiondetails.SessionID = (select count(*) from sessiondetails)\n"
                + "left join courses on courses.course_level = students.level and courses.course_programmeid = students.student_ProgrammeID;";
    }

    private String getStudentQuery(String matricNo) {
        return String.format("select * from students \n"
                + "inner join programmes on students.student_programmeid = programmes.ProgrammeID\n"
                + "inner join departments on programmes.programme_deptid = departments.deptid\n"
                + "inner join colleges on departments.dept_CollegeID = colleges.CollegeID\n"
                + "left join (select carryovers.*, courses.creditunits as Carry_CreditUnits from carryovers,courses \n"
                + "				where carryovers.carry_coursecode = courses.coursecode) \n"
                + "as CarryOvers on students.MatricNo = carryovers.Carry_MatricNo\n"
                + "left join (select registeredcourses.*, courses.creditunits as Reg_CreditUnits from registeredcourses,courses \n"
                + "				where registeredcourses.Reg_CourseCode = courses.coursecode\n"
                + "				and registeredcourses.reg_sessionid = (select count(*) from sessiondetails)) \n"
                + "as RegisteredCourses on registeredcourses.Reg_MatricNo = students.MatricNo\n"
                + "inner join sessiondetails on sessiondetails.SessionID = (select count(*) from sessiondetails)\n"
                + "left join courses on courses.course_level = students.level and courses.course_programmeid = students.student_ProgrammeID\n"
                + "where students.MatricNo = '%s';", matricNo);
    }

    public final void setEnterKeyAction() {
        KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        InputMap in = loginPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        in.put(stroke, "login");

        ActionMap ac = loginPanel.getActionMap();
        ac.put("login", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnLoginActionPerformed(e);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblLogin;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPasswordField pswdPass;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
